{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "AzureADFMosaicPipeline"
		},
		"AzureBlobStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage1'"
		},
		"AzureBlobStorage2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage2'"
		},
		"AzureSqlDatabase1_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'AzureSqlDatabase1'"
		},
		"BRSpectro_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'BRSpectro'"
		},
		"OnPremDatabase_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'OnPremDatabase'"
		},
		"AzureSqlDatabase1_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "brazildb.database.windows.net"
		},
		"AzureSqlDatabase1_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "BrazilDB"
		},
		"AzureSqlDatabase1_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "user"
		},
		"BRSpectro_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "brazildb.database.windows.net"
		},
		"BRSpectro_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "BrazilDB"
		},
		"BRSpectro_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "user"
		},
		"OnPremDatabase_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "PF4WB9DF\\SQLEXP2019"
		},
		"OnPremDatabase_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "AdventureWorks2019"
		},
		"OnPremDatabase_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "sa"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/1_ICRISstgBrand')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PL1_DF",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "1_ProcessBrazilDataToICRIS_Brand_DF",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"stgBrand": {},
									"ICRISstgBrand": {},
									"InsertSink": {},
									"Update": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"COUNT": {
						"type": "Integer"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-09-17T11:09:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/1_ProcessBrazilDataToICRIS_Brand_DF')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/2_ICRISstgColor')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "2_ProcessBrazilDataToICRIS_Color",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "2_ProcessBrazilDataToICRIS_Color_DF",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"stgColor": {},
									"ICRISstgColor": {},
									"JsonFile": {},
									"stgVariant": {},
									"InsertSinkColor": {},
									"UpdateSinkColor": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/2_ProcessBrazilDataToICRIS_Color_DF')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ICRISStgIngredient')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BRSpectro",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "FormulaId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "StagingId",
						"type": "nvarchar"
					},
					{
						"name": "FormulaTalendId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Line",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "ProductCode",
						"type": "nvarchar"
					},
					{
						"name": "Amount",
						"type": "float",
						"precision": 15
					},
					{
						"name": "Deleted",
						"type": "bit"
					},
					{
						"name": "DateModifiedTalend",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "TalendId",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "ICRIS_stg_Ingredient"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/BRSpectro')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ICRISstgBrand')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BRSpectro",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Code",
						"type": "nvarchar"
					},
					{
						"name": "Name",
						"type": "nvarchar"
					},
					{
						"name": "Deleted",
						"type": "bit"
					},
					{
						"name": "DateModifiedTalend",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "Id",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "ICRIS_stg_Brand"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/BRSpectro')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ICRISstgColor')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BRSpectro",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "StagingId",
						"type": "nvarchar"
					},
					{
						"name": "Code",
						"type": "nvarchar"
					},
					{
						"name": "BrandCode",
						"type": "nvarchar"
					},
					{
						"name": "VariantCode",
						"type": "nvarchar"
					},
					{
						"name": "Year",
						"type": "nvarchar"
					},
					{
						"name": "Name",
						"type": "nvarchar"
					},
					{
						"name": "Use",
						"type": "bit"
					},
					{
						"name": "Red",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Green",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Blue",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Effect",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "Deleted",
						"type": "bit"
					},
					{
						"name": "DateCreated",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "DateModified",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "DateModifiedTalend",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "ICRIS_stg_Color"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/BRSpectro')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ICRISstgFormula')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BRSpectro",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TalendId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ColorId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "StagingId",
						"type": "nvarchar"
					},
					{
						"name": "QualityId",
						"type": "nvarchar"
					},
					{
						"name": "UndercoatCode",
						"type": "nvarchar"
					},
					{
						"name": "Deleted",
						"type": "bit"
					},
					{
						"name": "DateCreated",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "DateModified",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "DateModifiedTalend",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "ICRIS_stg_Formula"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/BRSpectro')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TableJson')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BRSpectro",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "source",
						"type": "nvarchar"
					},
					{
						"name": "staging",
						"type": "nvarchar"
					},
					{
						"name": "target",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tFixedFlowInput"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/BRSpectro')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/stgBrand')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BRSpectro",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "varchar"
					},
					{
						"name": "originated",
						"type": "varchar"
					},
					{
						"name": "description",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "stg_Brand"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/BRSpectro')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/stgColor')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BRSpectro",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "varchar"
					},
					{
						"name": "originated",
						"type": "varchar"
					},
					{
						"name": "universal_code",
						"type": "varchar"
					},
					{
						"name": "color_name",
						"type": "varchar"
					},
					{
						"name": "year",
						"type": "decimal",
						"precision": 4,
						"scale": 0
					},
					{
						"name": "version",
						"type": "decimal",
						"precision": 4,
						"scale": 0
					},
					{
						"name": "version_date",
						"type": "date"
					},
					{
						"name": "brand",
						"type": "varchar"
					},
					{
						"name": "effect",
						"type": "varchar"
					},
					{
						"name": "density",
						"type": "decimal",
						"precision": 8,
						"scale": 4
					},
					{
						"name": "last_update",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "stg_Color"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/BRSpectro')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/stgFormula')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BRSpectro",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "decimal",
						"precision": 8,
						"scale": 0
					},
					{
						"name": "originated",
						"type": "varchar"
					},
					{
						"name": "color",
						"type": "varchar"
					},
					{
						"name": "line",
						"type": "varchar"
					},
					{
						"name": "subline",
						"type": "varchar"
					},
					{
						"name": "undercoat",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "stg_Formula"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/BRSpectro')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/stgIngredient')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BRSpectro",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "decimal",
						"precision": 8,
						"scale": 0
					},
					{
						"name": "originated",
						"type": "varchar"
					},
					{
						"name": "product",
						"type": "varchar"
					},
					{
						"name": "amount",
						"type": "decimal",
						"precision": 8,
						"scale": 4
					},
					{
						"name": "formula",
						"type": "decimal",
						"precision": 8,
						"scale": 0
					},
					{
						"name": "ordination",
						"type": "decimal",
						"precision": 2,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "stg_Ingredient"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/BRSpectro')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/stgIngredientTempData')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "stgIngredientTempData",
						"folderPath": "TEST",
						"container": "brdata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/stgProduct')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BRSpectro",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "varchar"
					},
					{
						"name": "display_id",
						"type": "varchar"
					},
					{
						"name": "originated",
						"type": "varchar"
					},
					{
						"name": "product_name",
						"type": "varchar"
					},
					{
						"name": "type",
						"type": "decimal",
						"precision": 2,
						"scale": 0
					},
					{
						"name": "used_in_formula",
						"type": "decimal",
						"precision": 1,
						"scale": 0
					},
					{
						"name": "density",
						"type": "decimal",
						"precision": 8,
						"scale": 4
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "stg_Product"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/BRSpectro')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/stgVariant')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BRSpectro",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "decimal",
						"precision": 8,
						"scale": 0
					},
					{
						"name": "originated",
						"type": "varchar"
					},
					{
						"name": "color",
						"type": "varchar"
					},
					{
						"name": "color_variant",
						"type": "varchar"
					},
					{
						"name": "description",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "stg_Variant"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/BRSpectro')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage2_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('AzureSqlDatabase1_properties_typeProperties_server')]",
					"database": "[parameters('AzureSqlDatabase1_properties_typeProperties_database')]",
					"encrypt": "optional",
					"trustServerCertificate": true,
					"authenticationType": "SQL",
					"userName": "[parameters('AzureSqlDatabase1_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('AzureSqlDatabase1_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BRSpectro')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('BRSpectro_properties_typeProperties_server')]",
					"database": "[parameters('BRSpectro_properties_typeProperties_database')]",
					"encrypt": "optional",
					"trustServerCertificate": true,
					"authenticationType": "SQL",
					"userName": "[parameters('BRSpectro_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('BRSpectro_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/OnPremDatabase')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"server": "[parameters('OnPremDatabase_properties_typeProperties_server')]",
					"database": "[parameters('OnPremDatabase_properties_typeProperties_database')]",
					"encrypt": "optional",
					"trustServerCertificate": true,
					"authenticationType": "SQL",
					"userName": "[parameters('OnPremDatabase_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('OnPremDatabase_password')]"
					}
				},
				"connectVia": {
					"referenceName": "OnPremSQLData",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/OnPremSQLData')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OnPremSQLData')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"description": "Database stored on my local machine",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/1_ProcessBrazilDataToICRIS_Brand_DF')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "stgBrand",
								"type": "DatasetReference"
							},
							"name": "stgBrand",
							"description": "Import data from Brazil stgBrand"
						},
						{
							"dataset": {
								"referenceName": "ICRISstgBrand",
								"type": "DatasetReference"
							},
							"name": "ICRISstgBrand"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ICRISstgBrand",
								"type": "DatasetReference"
							},
							"name": "InsertSink"
						},
						{
							"dataset": {
								"referenceName": "ICRISstgBrand",
								"type": "DatasetReference"
							},
							"name": "Update"
						}
					],
					"transformations": [
						{
							"name": "lookup1"
						},
						{
							"name": "CheckingBrandCodeISNULLorNOT"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as string,",
						"          originated as string,",
						"          description as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> stgBrand",
						"source(output(",
						"          Code as string,",
						"          Name as string,",
						"          Deleted as boolean,",
						"          DateModifiedTalend as timestamp,",
						"          Id as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ICRISstgBrand",
						"stgBrand, ICRISstgBrand lookup(stgBrand@id == Code,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 split(isNull(Code)|| trim(Code) == '',",
						"     disjoint: false) ~> CheckingBrandCodeISNULLorNOT@(row2CodeIsNull, row2CodeIsNotNull)",
						"CheckingBrandCodeISNULLorNOT@row2CodeIsNull derive(code = '0',",
						"          deleted = '0') ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Code as string,",
						"          Name as string,",
						"          Deleted as boolean,",
						"          DateModifiedTalend as timestamp,",
						"          Id as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Code = CheckingBrandCodeISNULLorNOT@row2CodeIsNull@id,",
						"          Name = description,",
						"          Deleted = derivedColumn1@deleted,",
						"          DateModifiedTalend,",
						"          Id = derivedColumn1@code",
						"     )) ~> InsertSink",
						"CheckingBrandCodeISNULLorNOT@row2CodeIsNotNull sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Code as string,",
						"          Name as string,",
						"          Deleted as boolean,",
						"          DateModifiedTalend as timestamp,",
						"          Id as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> Update"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/stgBrand')]",
				"[concat(variables('factoryId'), '/datasets/ICRISstgBrand')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/2_ProcessBrazilDataToICRIS_Color_DF')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "stgColor",
								"type": "DatasetReference"
							},
							"name": "stgColor",
							"description": "Dataset for Brazil Color"
						},
						{
							"dataset": {
								"referenceName": "ICRISstgColor",
								"type": "DatasetReference"
							},
							"name": "ICRISstgColor",
							"description": "Dataset for ICRISstgColor"
						},
						{
							"dataset": {
								"referenceName": "TableJson",
								"type": "DatasetReference"
							},
							"name": "JsonFile"
						},
						{
							"dataset": {
								"referenceName": "stgVariant",
								"type": "DatasetReference"
							},
							"name": "stgVariant",
							"description": "Data from stgVariant"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ICRISstgColor",
								"type": "DatasetReference"
							},
							"name": "InsertSinkColor"
						},
						{
							"dataset": {
								"referenceName": "ICRISstgColor",
								"type": "DatasetReference"
							},
							"name": "UpdateSinkColor"
						}
					],
					"transformations": [
						{
							"name": "CheckingIFNULL"
						},
						{
							"name": "join1"
						},
						{
							"name": "SelectingAll"
						},
						{
							"name": "JoinWithJSON"
						},
						{
							"name": "derivedHardCodedColums"
						},
						{
							"name": "join2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as string,",
						"          originated as string,",
						"          universal_code as string,",
						"          color_name as string,",
						"          year as decimal(4,0),",
						"          version as decimal(4,0),",
						"          version_date as date,",
						"          brand as string,",
						"          effect as string,",
						"          density as decimal(8,4),",
						"          last_update as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> stgColor",
						"source(output(",
						"          Id as integer,",
						"          StagingId as string,",
						"          Code as string,",
						"          BrandCode as string,",
						"          VariantCode as string,",
						"          Year as string,",
						"          Name as string,",
						"          Use as boolean,",
						"          Red as integer,",
						"          Green as integer,",
						"          Blue as integer,",
						"          Effect as integer,",
						"          Deleted as boolean,",
						"          DateCreated as timestamp,",
						"          DateModified as timestamp,",
						"          DateModifiedTalend as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ICRISstgColor",
						"source(output(",
						"          source as string,",
						"          staging as string,",
						"          target as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> JsonFile",
						"source(output(",
						"          id as decimal(8,0),",
						"          originated as string,",
						"          color as string,",
						"          color_variant as string,",
						"          description as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> stgVariant",
						"JoinWithJSON split(isNull(StagingId) || trim(StagingId) == '' && !isNull(SelectingAll@effect),",
						"     disjoint: true) ~> CheckingIFNULL@(StagingIdISNULL, StagingIdISnotNULL)",
						"stgColor, ICRISstgColor join(stgColor@id == StagingId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join2 select(mapColumn(",
						"          id = stgColor@id,",
						"          originated = stgColor@originated,",
						"          universal_code,",
						"          color_name,",
						"          year = stgColor@year,",
						"          version,",
						"          version_date,",
						"          brand,",
						"          effect = stgColor@effect,",
						"          density,",
						"          last_update,",
						"          Id = ICRISstgColor@Id,",
						"          StagingId,",
						"          Code,",
						"          BrandCode,",
						"          VariantCode,",
						"          Year = ICRISstgColor@Year,",
						"          Name,",
						"          Use,",
						"          Red,",
						"          Green,",
						"          Blue,",
						"          Effect = ICRISstgColor@Effect,",
						"          Deleted,",
						"          DateCreated,",
						"          DateModified,",
						"          DateModifiedTalend,",
						"          id = stgVariant@id,",
						"          originated = stgVariant@originated,",
						"          color,",
						"          color_variant,",
						"          description",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectingAll",
						"SelectingAll, JsonFile join(SelectingAll@effect == source,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinWithJSON",
						"CheckingIFNULL@StagingIdISNULL derive(newid = '0',",
						"          newred = '0',",
						"          newblue = '0',",
						"          newgreen = '0',",
						"          newuse = isBoolean('true'),",
						"          newdeleted = '0') ~> derivedHardCodedColums",
						"join1, stgVariant join(stgColor@originated == stgVariant@originated,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"derivedHardCodedColums sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as integer,",
						"          StagingId as string,",
						"          Code as string,",
						"          BrandCode as string,",
						"          VariantCode as string,",
						"          Year as string,",
						"          Name as string,",
						"          Use as boolean,",
						"          Red as integer,",
						"          Green as integer,",
						"          Blue as integer,",
						"          Effect as integer,",
						"          Deleted as boolean,",
						"          DateCreated as timestamp,",
						"          DateModified as timestamp,",
						"          DateModifiedTalend as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Id = newid,",
						"          StagingId = CheckingIFNULL@StagingIdISNULL@id,",
						"          Code = universal_code,",
						"          BrandCode = brand,",
						"          VariantCode = description,",
						"          Year = CheckingIFNULL@StagingIdISNULL@year,",
						"          Name = color_name,",
						"          Use = newuse,",
						"          Red = newred,",
						"          Green = newgreen,",
						"          Blue = newblue,",
						"          Effect = target,",
						"          Deleted = newdeleted,",
						"          DateCreated = version_date,",
						"          DateModified = version_date,",
						"          DateModifiedTalend = last_update",
						"     )) ~> InsertSinkColor",
						"CheckingIFNULL@StagingIdISnotNULL sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as integer,",
						"          StagingId as string,",
						"          Code as string,",
						"          BrandCode as string,",
						"          VariantCode as string,",
						"          Year as string,",
						"          Name as string,",
						"          Use as boolean,",
						"          Red as integer,",
						"          Green as integer,",
						"          Blue as integer,",
						"          Effect as integer,",
						"          Deleted as boolean,",
						"          DateCreated as timestamp,",
						"          DateModified as timestamp,",
						"          DateModifiedTalend as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          StagingId = CheckingIFNULL@StagingIdISnotNULL@id,",
						"          Code = universal_code,",
						"          BrandCode = brand,",
						"          VariantCode = description,",
						"          Year = CheckingIFNULL@StagingIdISnotNULL@Year,",
						"          Name = color_name,",
						"          Use,",
						"          Effect = target,",
						"          Deleted,",
						"          DateModified = version_date,",
						"          DateModifiedTalend = last_update",
						"     )) ~> UpdateSinkColor"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/stgColor')]",
				"[concat(variables('factoryId'), '/datasets/ICRISstgColor')]",
				"[concat(variables('factoryId'), '/datasets/TableJson')]",
				"[concat(variables('factoryId'), '/datasets/stgVariant')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/3_NTWORKINGProcessBrazilDataToICRIS_Formula_DF')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "stgColor",
								"type": "DatasetReference"
							},
							"name": "stgColor"
						},
						{
							"dataset": {
								"referenceName": "ICRISstgFormula",
								"type": "DatasetReference"
							},
							"name": "ICRISstgFormula"
						},
						{
							"dataset": {
								"referenceName": "stgFormula",
								"type": "DatasetReference"
							},
							"name": "stgFormula"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "stgFormula",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "JoinOnFormula"
						},
						{
							"name": "join1"
						},
						{
							"name": "split1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as string,",
						"          originated as string,",
						"          universal_code as string,",
						"          color_name as string,",
						"          year as decimal(4,0),",
						"          version as decimal(4,0),",
						"          version_date as date,",
						"          brand as string,",
						"          effect as string,",
						"          density as decimal(8,4),",
						"          last_update as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> stgColor",
						"source(output(",
						"          Id as integer,",
						"          TalendId as integer,",
						"          ColorId as integer,",
						"          StagingId as string,",
						"          QualityId as string,",
						"          UndercoatCode as string,",
						"          Deleted as boolean,",
						"          DateCreated as timestamp,",
						"          DateModified as timestamp,",
						"          DateModifiedTalend as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ICRISstgFormula",
						"source(output(",
						"          id as decimal(8,0),",
						"          originated as string,",
						"          color as string,",
						"          line as string,",
						"          subline as string,",
						"          undercoat as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> stgFormula",
						"stgColor, stgFormula join(stgColor@id == color,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinOnFormula",
						"JoinOnFormula, ICRISstgFormula join(stgColor@id == StagingId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 split(isNull(StagingId),",
						"     disjoint: false) ~> split1@(stagingidISNULL, stagingidISnotNULL)",
						"split1@stagingidISNULL sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id as decimal(8,0),",
						"          originated as string,",
						"          color as string,",
						"          line as string,",
						"          subline as string,",
						"          undercoat as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/stgColor')]",
				"[concat(variables('factoryId'), '/datasets/ICRISstgFormula')]",
				"[concat(variables('factoryId'), '/datasets/stgFormula')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/4_ProcessBrazilDataToICRIS_Ingredient_DF')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "stgIngredient",
								"type": "DatasetReference"
							},
							"name": "stgIngredient"
						},
						{
							"dataset": {
								"referenceName": "stgFormula",
								"type": "DatasetReference"
							},
							"name": "stgFormula"
						},
						{
							"dataset": {
								"referenceName": "stgProduct",
								"type": "DatasetReference"
							},
							"name": "stgProduct"
						},
						{
							"dataset": {
								"referenceName": "stgColor",
								"type": "DatasetReference"
							},
							"name": "stgColor"
						},
						{
							"dataset": {
								"referenceName": "ICRISstgFormula",
								"type": "DatasetReference"
							},
							"name": "ICRISStgFormula"
						},
						{
							"dataset": {
								"referenceName": "ICRISStgIngredient",
								"type": "DatasetReference"
							},
							"name": "ICRISStgIngredient"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "stgIngredientTempData",
								"type": "DatasetReference"
							},
							"name": "stgingredientdata"
						}
					],
					"transformations": [
						{
							"name": "JoiningIngredandFormula"
						},
						{
							"name": "FirstjoinandProduct"
						},
						{
							"name": "AllJoinsandstgColor"
						},
						{
							"name": "select1"
						},
						{
							"name": "select2"
						},
						{
							"name": "select3"
						},
						{
							"name": "joinICRISStgFormula"
						},
						{
							"name": "joinICRISStgIngredient"
						},
						{
							"name": "select4"
						},
						{
							"name": "select5"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as decimal(8,0),",
						"          originated as string,",
						"          product as string,",
						"          amount as decimal(8,4),",
						"          formula as decimal(8,0),",
						"          ordination as decimal(2,0)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> stgIngredient",
						"source(output(",
						"          id as decimal(8,0),",
						"          originated as string,",
						"          color as string,",
						"          line as string,",
						"          subline as string,",
						"          undercoat as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> stgFormula",
						"source(output(",
						"          id as string,",
						"          display_id as string,",
						"          originated as string,",
						"          product_name as string,",
						"          type as decimal(2,0),",
						"          used_in_formula as decimal(1,0),",
						"          density as decimal(8,4)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> stgProduct",
						"source(output(",
						"          id as string,",
						"          originated as string,",
						"          universal_code as string,",
						"          color_name as string,",
						"          year as decimal(4,0),",
						"          version as decimal(4,0),",
						"          version_date as date,",
						"          brand as string,",
						"          effect as string,",
						"          density as decimal(8,4),",
						"          last_update as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> stgColor",
						"source(output(",
						"          Id as integer,",
						"          TalendId as integer,",
						"          ColorId as integer,",
						"          StagingId as string,",
						"          QualityId as string,",
						"          UndercoatCode as string,",
						"          Deleted as boolean,",
						"          DateCreated as timestamp,",
						"          DateModified as timestamp,",
						"          DateModifiedTalend as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ICRISStgFormula",
						"source(output(",
						"          FormulaId as integer,",
						"          StagingId as string,",
						"          FormulaTalendId as integer,",
						"          Line as integer,",
						"          ProductCode as string,",
						"          Amount as double,",
						"          Deleted as boolean,",
						"          DateModifiedTalend as timestamp,",
						"          TalendId as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ICRISStgIngredient",
						"stgIngredient, stgFormula join(formula == stgFormula@id,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoiningIngredandFormula",
						"select1, stgProduct join({product(ING)} == id,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> FirstjoinandProduct",
						"select2, stgColor join({color(FR)} == id,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> AllJoinsandstgColor",
						"JoiningIngredandFormula select(mapColumn(",
						"          {ID(ING)} = stgIngredient@id,",
						"          {originated(ING)} = stgIngredient@originated,",
						"          {product(ING)} = product,",
						"          {amount(ING)} = amount,",
						"          {formula(ING)} = formula,",
						"          {ordination(ING)} = ordination,",
						"          {id(FR)} = stgFormula@id,",
						"          {originated(FR)} = stgFormula@originated,",
						"          {color(FR)} = color,",
						"          {line(FR)} = line,",
						"          {subline(FR)} = subline,",
						"          {undercoat(FR)} = undercoat",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"FirstjoinandProduct select(mapColumn(",
						"          {ID(ING)},",
						"          {originated(ING)},",
						"          {product(ING)},",
						"          {amount(ING)},",
						"          {formula(ING)},",
						"          {ordination(ING)},",
						"          {id(FR)},",
						"          {color(FR)},",
						"          {line(FR)},",
						"          {subline(FR)},",
						"          {undercoat(FR)},",
						"          {id(PR)} = id,",
						"          {display_id(PR)} = display_id,",
						"          {originated(PR)} = originated,",
						"          {product_name(PR)} = product_name,",
						"          {type(PR)} = type,",
						"          {used_in_formula(PR)} = used_in_formula,",
						"          {density(PR)} = density",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"AllJoinsandstgColor select(mapColumn(",
						"          {product(ING)},",
						"          {amount(ING)},",
						"          {ordination(ING)},",
						"          {color(FR)},",
						"          {last_update(CLR)} = last_update",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"select3, ICRISStgFormula join({color(FR)} == StagingId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinICRISStgFormula",
						"select4, ICRISStgIngredient join({product(ING)} == ProductCode,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinICRISStgIngredient",
						"joinICRISStgFormula select(mapColumn(",
						"          {product(ING)},",
						"          {amount(ING)},",
						"          {ordination(ING)},",
						"          {color(FR)},",
						"          {last_update(CLR)},",
						"          {Id(ICRISFR)} = Id,",
						"          {TalendId(ICRISFR)} = TalendId,",
						"          {ColorId(ICRISFR)} = ColorId,",
						"          {StagingId(ICRISFR)} = StagingId,",
						"          {QualityId(ICRISFR)} = QualityId,",
						"          {UndercoatCode(ICRISFR)} = UndercoatCode,",
						"          {Deleted(ICRISFR)} = Deleted,",
						"          {DateCreated(ICRISFR)} = DateCreated,",
						"          {DateModified(ICRISFR)} = DateModified,",
						"          {DateModifiedTalend(ICRISFR)} = DateModifiedTalend",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select4",
						"joinICRISStgIngredient select(mapColumn(",
						"          {DateModifiedTalend(ICRISFR)},",
						"          {StagingId(ICRISING)} = StagingId,",
						"          {FormulaTalendId(ICRISING)} = FormulaTalendId,",
						"          {Line(ICRISING)} = Line,",
						"          {ProductCode(ICRISING)} = ProductCode,",
						"          {Amount(ICRISING)} = Amount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select5",
						"select5 derive(FormulaId = '0',",
						"          Deleted = '0') ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> stgingredientdata"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/stgIngredient')]",
				"[concat(variables('factoryId'), '/datasets/stgFormula')]",
				"[concat(variables('factoryId'), '/datasets/stgProduct')]",
				"[concat(variables('factoryId'), '/datasets/stgColor')]",
				"[concat(variables('factoryId'), '/datasets/ICRISstgFormula')]",
				"[concat(variables('factoryId'), '/datasets/ICRISStgIngredient')]",
				"[concat(variables('factoryId'), '/datasets/stgIngredientTempData')]"
			]
		}
	]
}