{
	"name": "2_ProcessBrazilDataToICRIS_Color",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "stgColor",
						"type": "DatasetReference"
					},
					"name": "stgColor",
					"description": "Dataset for Brazil Color"
				},
				{
					"dataset": {
						"referenceName": "ICRISstgColor",
						"type": "DatasetReference"
					},
					"name": "ICRISstgColor",
					"description": "Dataset for ICRISstgColor"
				},
				{
					"dataset": {
						"referenceName": "TableJson",
						"type": "DatasetReference"
					},
					"name": "JsonFile"
				},
				{
					"dataset": {
						"referenceName": "stgVariant",
						"type": "DatasetReference"
					},
					"name": "stgVariant",
					"description": "Data from stgVariant"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ICRISstgColor",
						"type": "DatasetReference"
					},
					"name": "InsertSinkColor"
				},
				{
					"dataset": {
						"referenceName": "ICRISstgColor",
						"type": "DatasetReference"
					},
					"name": "UpdateSinkColor"
				}
			],
			"transformations": [
				{
					"name": "CheckingIFNULL"
				},
				{
					"name": "join1"
				},
				{
					"name": "SelectingAll"
				},
				{
					"name": "JoinWithJSON"
				},
				{
					"name": "derivedHardCodedColums"
				},
				{
					"name": "join2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          id as string,",
				"          originated as string,",
				"          universal_code as string,",
				"          color_name as string,",
				"          year as decimal(4,0),",
				"          version as decimal(4,0),",
				"          version_date as date,",
				"          brand as string,",
				"          effect as string,",
				"          density as decimal(8,4),",
				"          last_update as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> stgColor",
				"source(output(",
				"          Id as integer,",
				"          StagingId as string,",
				"          Code as string,",
				"          BrandCode as string,",
				"          VariantCode as string,",
				"          Year as string,",
				"          Name as string,",
				"          Use as boolean,",
				"          Red as integer,",
				"          Green as integer,",
				"          Blue as integer,",
				"          Effect as integer,",
				"          Deleted as boolean,",
				"          DateCreated as timestamp,",
				"          DateModified as timestamp,",
				"          DateModifiedTalend as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> ICRISstgColor",
				"source(output(",
				"          source as string,",
				"          staging as string,",
				"          target as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> JsonFile",
				"source(output(",
				"          id as decimal(8,0),",
				"          originated as string,",
				"          color as string,",
				"          color_variant as string,",
				"          description as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> stgVariant",
				"JoinWithJSON split(isNull(StagingId) || trim(StagingId) == '' && !isNull(SelectingAll@effect),",
				"     disjoint: true) ~> CheckingIFNULL@(StagingIdISNULL, StagingIdISnotNULL)",
				"stgColor, ICRISstgColor join(stgColor@id == StagingId,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join2 select(mapColumn(",
				"          id = stgColor@id,",
				"          originated = stgColor@originated,",
				"          universal_code,",
				"          color_name,",
				"          year = stgColor@year,",
				"          version,",
				"          version_date,",
				"          brand,",
				"          effect = stgColor@effect,",
				"          density,",
				"          last_update,",
				"          Id = ICRISstgColor@Id,",
				"          StagingId,",
				"          Code,",
				"          BrandCode,",
				"          VariantCode,",
				"          Year = ICRISstgColor@Year,",
				"          Name,",
				"          Use,",
				"          Red,",
				"          Green,",
				"          Blue,",
				"          Effect = ICRISstgColor@Effect,",
				"          Deleted,",
				"          DateCreated,",
				"          DateModified,",
				"          DateModifiedTalend,",
				"          id = stgVariant@id,",
				"          originated = stgVariant@originated,",
				"          color,",
				"          color_variant,",
				"          description",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectingAll",
				"SelectingAll, JsonFile join(SelectingAll@effect == source,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinWithJSON",
				"CheckingIFNULL@StagingIdISNULL derive(newid = '0',",
				"          newred = '0',",
				"          newblue = '0',",
				"          newgreen = '0',",
				"          newuse = isBoolean('true'),",
				"          newdeleted = '0') ~> derivedHardCodedColums",
				"join1, stgVariant join(stgColor@originated == stgVariant@originated,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"derivedHardCodedColums sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Id as integer,",
				"          StagingId as string,",
				"          Code as string,",
				"          BrandCode as string,",
				"          VariantCode as string,",
				"          Year as string,",
				"          Name as string,",
				"          Use as boolean,",
				"          Red as integer,",
				"          Green as integer,",
				"          Blue as integer,",
				"          Effect as integer,",
				"          Deleted as boolean,",
				"          DateCreated as timestamp,",
				"          DateModified as timestamp,",
				"          DateModifiedTalend as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          Id = newid,",
				"          StagingId = CheckingIFNULL@StagingIdISNULL@id,",
				"          Code = universal_code,",
				"          BrandCode = brand,",
				"          VariantCode = description,",
				"          Year = CheckingIFNULL@StagingIdISNULL@year,",
				"          Name = color_name,",
				"          Use = newuse,",
				"          Red = newred,",
				"          Green = newgreen,",
				"          Blue = newblue,",
				"          Effect = target,",
				"          Deleted = newdeleted,",
				"          DateCreated = version_date,",
				"          DateModified = version_date,",
				"          DateModifiedTalend = last_update",
				"     )) ~> InsertSinkColor",
				"CheckingIFNULL@StagingIdISnotNULL sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Id as integer,",
				"          StagingId as string,",
				"          Code as string,",
				"          BrandCode as string,",
				"          VariantCode as string,",
				"          Year as string,",
				"          Name as string,",
				"          Use as boolean,",
				"          Red as integer,",
				"          Green as integer,",
				"          Blue as integer,",
				"          Effect as integer,",
				"          Deleted as boolean,",
				"          DateCreated as timestamp,",
				"          DateModified as timestamp,",
				"          DateModifiedTalend as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> UpdateSinkColor"
			]
		}
	}
}