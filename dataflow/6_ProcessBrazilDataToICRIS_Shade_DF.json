{
	"name": "6_ProcessBrazilDataToICRIS_Shade_DF",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "stgColor",
						"type": "DatasetReference"
					},
					"name": "stgColor"
				},
				{
					"dataset": {
						"referenceName": "stgSpectro",
						"type": "DatasetReference"
					},
					"name": "stgSpectro"
				},
				{
					"dataset": {
						"referenceName": "stgSpectro",
						"type": "DatasetReference"
					},
					"name": "stgColorMergingTmap3"
				},
				{
					"dataset": {
						"referenceName": "stgVariant",
						"type": "DatasetReference"
					},
					"name": "stgVariantNull"
				},
				{
					"dataset": {
						"referenceName": "stgVariant",
						"type": "DatasetReference"
					},
					"name": "stgVariantNotNullQuery"
				},
				{
					"dataset": {
						"referenceName": "ICRISstgFormula",
						"type": "DatasetReference"
					},
					"name": "ICRISstgFormula"
				},
				{
					"dataset": {
						"referenceName": "ICRISstgFormulaMeasurement",
						"type": "DatasetReference"
					},
					"name": "ICRISstgFormulaMeasurement"
				},
				{
					"dataset": {
						"referenceName": "stgVariant",
						"type": "DatasetReference"
					},
					"name": "stgVariant"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "stgIngredientTempData",
						"type": "DatasetReference"
					},
					"name": "Update"
				},
				{
					"dataset": {
						"referenceName": "stgIngredientTempData",
						"type": "DatasetReference"
					},
					"name": "DelUpdate"
				},
				{
					"dataset": {
						"referenceName": "ICRISstgFormulaMeasurement",
						"type": "DatasetReference"
					},
					"name": "NewFmInsert"
				}
			],
			"transformations": [
				{
					"name": "joiningspectroandcolor"
				},
				{
					"name": "select1"
				},
				{
					"name": "joinstgVariant"
				},
				{
					"name": "select2"
				},
				{
					"name": "SettingUpAngle"
				},
				{
					"name": "select3"
				},
				{
					"name": "tMap3"
				},
				{
					"name": "select5"
				},
				{
					"name": "joinTMVar"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select6"
				},
				{
					"name": "joinICRISFormula"
				},
				{
					"name": "select7"
				},
				{
					"name": "joinICRISFrmMeasure"
				},
				{
					"name": "select8"
				},
				{
					"name": "stagingidisnull"
				},
				{
					"name": "join1"
				},
				{
					"name": "select9"
				},
				{
					"name": "joinICRISFRMMMT"
				},
				{
					"name": "select10"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "alterIfStagingIdnotNull"
				}
			],
			"scriptLines": [
				"source(output(",
				"          id as string,",
				"          originated as string,",
				"          universal_code as string,",
				"          color_name as string,",
				"          year as decimal(4,0),",
				"          version as decimal(4,0),",
				"          version_date as date,",
				"          brand as string,",
				"          effect as string,",
				"          density as decimal(8,4),",
				"          last_update as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> stgColor",
				"source(output(",
				"          id as decimal(8,0),",
				"          originated as string,",
				"          color as string,",
				"          angle as decimal(3,0),",
				"          graininess as decimal(4,2)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> stgSpectro",
				"source(output(",
				"          id as decimal(8,0),",
				"          originated as string,",
				"          color as string,",
				"          angle as decimal(3,0),",
				"          graininess as decimal(4,2)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> stgColorMergingTmap3",
				"source(output(",
				"          id as decimal(8,0),",
				"          originated as string,",
				"          color as string,",
				"          color_variant as string,",
				"          description as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'select * from stg_Variant where color_Variant is null',",
				"     format: 'query') ~> stgVariantNull",
				"source(output(",
				"          id as decimal(8,0),",
				"          originated as string,",
				"          color as string,",
				"          color_variant as string,",
				"          description as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'select * from stg_Variant where color_Variant is not null',",
				"     format: 'query') ~> stgVariantNotNullQuery",
				"source(output(",
				"          Id as integer,",
				"          TalendId as integer,",
				"          ColorId as integer,",
				"          StagingId as string,",
				"          QualityId as string,",
				"          UndercoatCode as string,",
				"          Deleted as boolean,",
				"          DateCreated as timestamp,",
				"          DateModified as timestamp,",
				"          DateModifiedTalend as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> ICRISstgFormula",
				"source(output(",
				"          Id as integer,",
				"          FormulaId as integer,",
				"          TalendId as integer,",
				"          StagingId as string,",
				"          FormulaTalendId as integer,",
				"          Description as string,",
				"          Graininess as double,",
				"          Deleted as boolean,",
				"          DateModifiedTalend as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> ICRISstgFormulaMeasurement",
				"source(output(",
				"          id as decimal(8,0),",
				"          originated as string,",
				"          color as string,",
				"          color_variant as string,",
				"          description as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> stgVariant",
				"stgSpectro, stgColor join(color == stgColor@id,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joiningspectroandcolor",
				"joiningspectroandcolor select(mapColumn(",
				"          {id(INSPC)} = stgSpectro@id,",
				"          {originated(INSPC)} = stgSpectro@originated,",
				"          {color(INSPC)} = color,",
				"          {angle(INSPC)} = angle,",
				"          {graininess(INSPC)} = graininess,",
				"          {id(INCLR)} = stgColor@id,",
				"          {originated(INCLR)} = stgColor@originated,",
				"          {universal_code(INCLR)} = universal_code,",
				"          {color_name(INCLR)} = color_name,",
				"          {year(INCLR)} = year,",
				"          {version(INCLR)} = version,",
				"          {version_date(INCLR)} = version_date,",
				"          {brand(INCLR)} = brand,",
				"          {effect(INCLR)} = effect,",
				"          {density(INCLR)} = density,",
				"          {last_update(INCLR)} = last_update",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1, stgVariantNotNullQuery join({color(INSPC)} == color_variant,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinstgVariant",
				"joinstgVariant select(mapColumn(",
				"          {id(INSPC)},",
				"          {originated(INSPC)},",
				"          {color(INSPC)},",
				"          {angle(INSPC)},",
				"          {graininess(INSPC)},",
				"          {id(INCLR)},",
				"          {originated(INCLR)},",
				"          {universal_code(INCLR)},",
				"          {color_name(INCLR)},",
				"          {year(INCLR)},",
				"          {version(INCLR)},",
				"          {version_date(INCLR)},",
				"          {brand(INCLR)},",
				"          {effect(INCLR)},",
				"          {density(INCLR)},",
				"          {last_update(INCLR)},",
				"          {id(INVAR)} = id,",
				"          {originated(INVAR)} = originated,",
				"          {color(INVAR)} = color,",
				"          {color_variant(INVAR)} = color_variant,",
				"          {description(INVAR)} = description",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 derive(descrip = iif({angle(INSPC)}==15 || {angle(INSPC)}==45 || {angle(INSPC)}==75, 'true','false')) ~> SettingUpAngle",
				"SettingUpAngle select(mapColumn(",
				"          {graininess(INSPC)},",
				"          {id(INCLR)},",
				"          {universal_code(INCLR)},",
				"          {color_name(INCLR)},",
				"          {brand(INCLR)},",
				"          {effect(INCLR)},",
				"          {last_update(INCLR)},",
				"          {color(INVAR)},",
				"          {color_variant(INVAR)},",
				"          newdescription = descrip,",
				"          {angle(INSPC)},",
				"          {description(INVAR)}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"select3, stgColor join({color(INVAR)} == id,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> tMap3",
				"tMap3 select(mapColumn(",
				"          {graininess(INSPC)},",
				"          {id(INCLR)},",
				"          {universal_code(INCLR)},",
				"          {color_name(INCLR)},",
				"          {brand(INCLR)},",
				"          {effect(INCLR)},",
				"          {last_update(INCLR)},",
				"          {color(INVAR)},",
				"          {color_variant(INVAR)},",
				"          description = newdescription,",
				"          {angle(INSPC)},",
				"          {description(INVAR)},",
				"          {id(TMCLR)} = id,",
				"          {originated(TMCLR)} = originated,",
				"          {universal_code(TMCLR)} = universal_code,",
				"          {color_name(TMCLR)} = color_name,",
				"          {year(TMCLR)} = year,",
				"          {version(TMCLR)} = version,",
				"          {version_date(TMCLR)} = version_date,",
				"          {brand(TMCLR)} = brand,",
				"          {effect(TMCLR)} = effect,",
				"          {density(TMCLR)} = density,",
				"          {last_update(TMCLR)} = last_update",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select5",
				"select5, stgVariantNull join({id(INCLR)} == color_variant,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinTMVar",
				"joinTMVar derive(TMChanges = iif({angle(INSPC)}==15 || {angle(INSPC)}==45 || {angle(INSPC)}==75, 'true','false'),",
				"          TMID = '0',",
				"          TMFRID = '0',",
				"          TMDEL = 'False') ~> derivedColumn1",
				"derivedColumn1 select(mapColumn(",
				"          {graininess(INSPC)},",
				"          {id(TMCLR)},",
				"          {last_update(TMCLR)},",
				"          {description(TMNULVAR)} = stgVariantNull@description,",
				"          TMChanges,",
				"          TMID,",
				"          TMFRID,",
				"          TMDEL",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select6",
				"select6, ICRISstgFormula join({id(TMCLR)} == StagingId,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinICRISFormula",
				"joinICRISFormula select(mapColumn(",
				"          {graininess(INSPC)},",
				"          {id(TMCLR)},",
				"          {last_update(TMCLR)},",
				"          {description(TMNULVAR)},",
				"          TMChanges,",
				"          TMID,",
				"          TMFRID,",
				"          TMDEL,",
				"          {Id(TMICRISFRM)} = Id,",
				"          {TalendId(TMICRISFRM)} = TalendId,",
				"          {ColorId(TMICRISFRM)} = ColorId,",
				"          {StagingId(TMICRISFRM)} = StagingId,",
				"          {QualityId(TMICRISFRM)} = QualityId,",
				"          {UndercoatCode(TMICRISFRM)} = UndercoatCode,",
				"          {Deleted(TMICRISFRM)} = Deleted,",
				"          {DateCreated(TMICRISFRM)} = DateCreated,",
				"          {DateModified(TMICRISFRM)} = DateModified,",
				"          {DateModifiedTalend(TMICRISFRM)} = DateModifiedTalend",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select7",
				"select7, ICRISstgFormulaMeasurement join({TalendId(TMICRISFRM)} == FormulaTalendId,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinICRISFrmMeasure",
				"joinICRISFrmMeasure select(mapColumn(",
				"          TMID,",
				"          TMFRID,",
				"          StagingId = Id,",
				"          FormulaTalendId = {TalendId(TMICRISFRM)},",
				"          Description,",
				"          Graininess = {graininess(INSPC)},",
				"          Delete = TMDEL,",
				"          DateModifiedTalend = {last_update(TMCLR)}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select8",
				"select8 filter(isNull(StagingId)) ~> stagingidisnull",
				"stgColor, stgVariant join(stgColor@id == color_variant,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 select(mapColumn(",
				"          {id(DLCLR)} = stgColor@id,",
				"          {originated(DLCLR)} = stgColor@originated,",
				"          {universal_code(DLCLR)} = universal_code,",
				"          {color_name(DLCLR)} = color_name,",
				"          {year(DLCLR)} = year,",
				"          {version(DLCLR)} = version,",
				"          {version_date(DLCLR)} = version_date,",
				"          {brand(DLCLR)} = brand,",
				"          {effect(DLCLR)} = effect,",
				"          {density(DLCLR)} = density,",
				"          {last_update(DLCLR)} = last_update,",
				"          {id(DLVAR)} = stgVariant@id,",
				"          {originated(DLVAR)} = stgVariant@originated,",
				"          {color(DLVAR)} = color,",
				"          {color_variant(DLVAR)} = color_variant,",
				"          {description(DLVAR)} = description",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select9",
				"select9, ICRISstgFormulaMeasurement join({id(DLCLR)} == StagingId,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinICRISFRMMMT",
				"derivedColumn2 select(mapColumn(",
				"          Id = {id(DLCLR)},",
				"          TalendId,",
				"          StagingId,",
				"          NewDeleted = NewDelete,",
				"          DateModifiedTalend = CURDATE",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select10",
				"joinICRISFRMMMT derive(CURDATE = currentUTC('DateModifiedTalend'),",
				"          NewDelete = 'True') ~> derivedColumn2",
				"select8 alterRow(updateIf(!isNull(StagingId))) ~> alterIfStagingIdnotNull",
				"alterIfStagingIdnotNull sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 2) ~> Update",
				"select10 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     mapColumn(",
				"          TalendId,",
				"          Deleted = NewDeleted,",
				"          DateModifiedTalend",
				"     )) ~> DelUpdate",
				"stagingidisnull sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Id as integer,",
				"          FormulaId as integer,",
				"          TalendId as integer,",
				"          StagingId as string,",
				"          FormulaTalendId as integer,",
				"          Description as string,",
				"          Graininess as double,",
				"          Deleted as boolean,",
				"          DateModifiedTalend as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          Id = TMID,",
				"          FormulaId = TMFRID,",
				"          StagingId,",
				"          FormulaTalendId,",
				"          Description,",
				"          Graininess,",
				"          Deleted = Delete,",
				"          DateModifiedTalend",
				"     )) ~> NewFmInsert"
			]
		}
	}
}