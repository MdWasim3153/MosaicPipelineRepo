{
	"name": "6_ProcessBrazilDataToICRIS_Shade_DF",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "stgColor",
						"type": "DatasetReference"
					},
					"name": "stgColor"
				},
				{
					"dataset": {
						"referenceName": "stgVariant",
						"type": "DatasetReference"
					},
					"name": "stgVariant"
				},
				{
					"dataset": {
						"referenceName": "stgSpectro",
						"type": "DatasetReference"
					},
					"name": "stgSpectro"
				},
				{
					"dataset": {
						"referenceName": "stgSpectro",
						"type": "DatasetReference"
					},
					"name": "stgColorMergingTmap3"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "stgColorShadeTMap3",
						"type": "DatasetReference"
					},
					"name": "stgColorShadeTMap3"
				}
			],
			"transformations": [
				{
					"name": "joiningspectroandcolor"
				},
				{
					"name": "select1"
				},
				{
					"name": "joinstgVariant"
				},
				{
					"name": "select2"
				},
				{
					"name": "Description"
				},
				{
					"name": "select3"
				},
				{
					"name": "tMap3"
				},
				{
					"name": "join1"
				},
				{
					"name": "select4"
				},
				{
					"name": "aggregate1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          id as string,",
				"          originated as string,",
				"          universal_code as string,",
				"          color_name as string,",
				"          year as decimal(4,0),",
				"          version as decimal(4,0),",
				"          version_date as date,",
				"          brand as string,",
				"          effect as string,",
				"          density as decimal(8,4),",
				"          last_update as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> stgColor",
				"source(output(",
				"          id as decimal(8,0),",
				"          originated as string,",
				"          color as string,",
				"          color_variant as string,",
				"          description as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> stgVariant",
				"source(output(",
				"          id as decimal(8,0),",
				"          originated as string,",
				"          color as string,",
				"          angle as decimal(3,0),",
				"          graininess as decimal(4,2)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> stgSpectro",
				"source(output(",
				"          id as decimal(8,0),",
				"          originated as string,",
				"          color as string,",
				"          angle as decimal(3,0),",
				"          graininess as decimal(4,2)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> stgColorMergingTmap3",
				"stgSpectro, stgColor join(color == stgColor@id,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joiningspectroandcolor",
				"joiningspectroandcolor select(mapColumn(",
				"          {id(INSPC)} = stgSpectro@id,",
				"          {originated(INSPC)} = stgSpectro@originated,",
				"          {color(INSPC)} = color,",
				"          {angle(INSPC)} = angle,",
				"          {graininess(INSPC)} = graininess,",
				"          {id(INCLR)} = stgColor@id,",
				"          {originated(INCLR)} = stgColor@originated,",
				"          {universal_code(INCLR)} = universal_code,",
				"          {color_name(INCLR)} = color_name,",
				"          {year(INCLR)} = year,",
				"          {version(INCLR)} = version,",
				"          {version_date(INCLR)} = version_date,",
				"          {brand(INCLR)} = brand,",
				"          {effect(INCLR)} = effect,",
				"          {density(INCLR)} = density,",
				"          {last_update(INCLR)} = last_update",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1, stgVariant join({color(INSPC)} == color_variant,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinstgVariant",
				"joinstgVariant select(mapColumn(",
				"          {id(INSPC)},",
				"          {originated(INSPC)},",
				"          {color(INSPC)},",
				"          {angle(INSPC)},",
				"          {graininess(INSPC)},",
				"          {id(INCLR)},",
				"          {originated(INCLR)},",
				"          {universal_code(INCLR)},",
				"          {color_name(INCLR)},",
				"          {year(INCLR)},",
				"          {version(INCLR)},",
				"          {version_date(INCLR)},",
				"          {brand(INCLR)},",
				"          {effect(INCLR)},",
				"          {density(INCLR)},",
				"          {last_update(INCLR)},",
				"          {id(INVAR)} = id,",
				"          {originated(INVAR)} = originated,",
				"          {color(INVAR)} = color,",
				"          {color_variant(INVAR)} = color_variant,",
				"          {description(INVAR)} = description",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 derive(descrip = iif({id(INCLR)}=={color_variant(INVAR)},{description(INVAR)},'')) ~> Description",
				"Description select(mapColumn(",
				"          {graininess(INSPC)},",
				"          {id(INCLR)},",
				"          {universal_code(INCLR)},",
				"          {color_name(INCLR)},",
				"          {brand(INCLR)},",
				"          {effect(INCLR)},",
				"          {last_update(INCLR)},",
				"          {color(INVAR)},",
				"          {color_variant(INVAR)},",
				"          description = descrip,",
				"          {angle(INSPC)},",
				"          {description(INVAR)}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"aggregate1, stgColor join({color(INVAR)} == id,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> tMap3",
				"stgColorMergingTmap3, stgColor join(color == stgColor@id,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 select(mapColumn(",
				"          {id(TMAPCLR)} = stgColorMergingTmap3@id,",
				"          {originated(TMAPCLR)} = stgColorMergingTmap3@originated,",
				"          {universal_code(TMAPCLR)} = universal_code,",
				"          {color_name(TMAPCLR)} = color_name,",
				"          {year(TMAPCLR)} = year,",
				"          {version(TMAPCLR)} = version,",
				"          {version_date(TMAPCLR)} = version_date,",
				"          {brand(TMAPCLR)} = brand,",
				"          {effect(TMAPCLR)} = effect,",
				"          {density(TMAPCLR)} = density,",
				"          {last_update(TMAPCLR)} = last_update,",
				"          {id(TMAPSPC)} = {stgSpectro@id},",
				"          {originated(TMAPSPC)} = {stgSpectro@originated},",
				"          {color(TMAPSPC)} = {stgSpectro@color},",
				"          {angle(TMAPSPC)} = {stgSpectro@angle},",
				"          {graininess(TMAPSPC)} = {stgSpectro@graininess}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select4",
				"select3 aggregate() ~> aggregate1",
				"tMap3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     errorHandlingOption: 'stopOnFirstError') ~> stgColorShadeTMap3"
			]
		}
	}
}