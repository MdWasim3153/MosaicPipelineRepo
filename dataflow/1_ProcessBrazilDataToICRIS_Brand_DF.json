{
	"name": "1_ProcessBrazilDataToICRIS_Brand_DF",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "stgBrand",
						"type": "DatasetReference"
					},
					"name": "stgBrand",
					"description": "Import data from Brazil stgBrand"
				},
				{
					"dataset": {
						"referenceName": "ICRISstgBrand",
						"type": "DatasetReference"
					},
					"name": "ICRISstgBrand"
				},
				{
					"dataset": {
						"referenceName": "stgBrand",
						"type": "DatasetReference"
					},
					"name": "UpdateStgBrand"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ICRISstgBrand",
						"type": "DatasetReference"
					},
					"name": "InsertSink"
				},
				{
					"dataset": {
						"referenceName": "ICRISstgBrand",
						"type": "DatasetReference"
					},
					"name": "UpdateSink"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "NotNullValues"
				},
				{
					"name": "select2"
				},
				{
					"name": "updatingStgBrand"
				},
				{
					"name": "join1"
				},
				{
					"name": "select3"
				},
				{
					"name": "filter2"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "select4"
				},
				{
					"name": "AlterRow1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          id as string,",
				"          originated as string,",
				"          description as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> stgBrand",
				"source(output(",
				"          Code as string,",
				"          Name as string,",
				"          Deleted as boolean,",
				"          DateModifiedTalend as timestamp,",
				"          Id as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> ICRISstgBrand",
				"source(output(",
				"          id as string,",
				"          originated as string,",
				"          description as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> UpdateStgBrand",
				"filter1 derive(newId = '0',",
				"          newDeleted = '0',",
				"          changedModifiedDate = currentUTC('{DateModifiedTalend(INICRISBR)}')) ~> derivedColumn1",
				"select2 filter(isNull({Code(INICRISBR)})) ~> filter1",
				"derivedColumn1 select(mapColumn(",
				"          {id(INBR)},",
				"          {description(INBR)},",
				"          newId,",
				"          newDeleted,",
				"          changedModifiedDate",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> NotNullValues",
				"join1 select(mapColumn(",
				"          {id(INBR)} = stgBrand@id,",
				"          {originated(INBR)} = originated,",
				"          {description(INBR)} = description,",
				"          {Code(INICRISBR)} = Code,",
				"          {Name(INICRISBR)} = Name,",
				"          {Deleted(INICRISBR)} = Deleted,",
				"          {DateModifiedTalend(INICRISBR)} = DateModifiedTalend,",
				"          {Id(INICRISBR)} = ICRISstgBrand@Id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"UpdateStgBrand, ICRISstgBrand join(UpdateStgBrand@id == Code,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> updatingStgBrand",
				"stgBrand, ICRISstgBrand join(stgBrand@id == Code,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"updatingStgBrand select(mapColumn(",
				"          {id(UPBR)} = UpdateStgBrand@id,",
				"          {originated(UPBR)} = originated,",
				"          {description(UPBR)} = description,",
				"          {Code(UPICRISBR)} = Code,",
				"          {Name(UPICRISBR)} = Name,",
				"          {Deleted(UPICRISBR)} = Deleted,",
				"          {DateModifiedTalend(UPICRISBR)} = DateModifiedTalend,",
				"          {Id(UPICRISBR)} = ICRISstgBrand@Id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"select3 filter(!isNull({Code(UPICRISBR)})) ~> filter2",
				"filter2 derive(UPDeleted = '0',",
				"          UPDatemodifiedTalend = currentUTC('{DateModifiedTalend(UPICRISBR)}')) ~> derivedColumn2",
				"derivedColumn2 select(mapColumn(",
				"          {description(UPBR)},",
				"          {Code(UPICRISBR)},",
				"          UPDeleted,",
				"          UPDatemodifiedTalend",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select4",
				"select4 alterRow(updateIf(!isNull({Code(UPICRISBR)}))) ~> AlterRow1",
				"NotNullValues sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Code as string,",
				"          Name as string,",
				"          Deleted as boolean,",
				"          DateModifiedTalend as timestamp,",
				"          Id as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          Code = {id(INBR)},",
				"          Name = {description(INBR)},",
				"          Deleted = newDeleted,",
				"          DateModifiedTalend = changedModifiedDate,",
				"          Id = newId",
				"     )) ~> InsertSink",
				"AlterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Code as string,",
				"          Name as string,",
				"          Deleted as boolean,",
				"          DateModifiedTalend as timestamp,",
				"          Id as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:true,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> UpdateSink"
			]
		}
	}
}