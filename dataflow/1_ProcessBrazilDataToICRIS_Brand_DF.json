{
	"name": "1_ProcessBrazilDataToICRIS_Brand_DF",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "stgBrand",
						"type": "DatasetReference"
					},
					"name": "stgBrand",
					"description": "Import data from Brazil stgBrand"
				},
				{
					"dataset": {
						"referenceName": "ICRISstgBrand",
						"type": "DatasetReference"
					},
					"name": "ICRISstgBrand"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ICRISstgBrand",
						"type": "DatasetReference"
					},
					"name": "InsertBrand"
				},
				{
					"dataset": {
						"referenceName": "ICRISstgBrand",
						"type": "DatasetReference"
					},
					"name": "UpdateBrand"
				},
				{
					"dataset": {
						"referenceName": "ICRISstgBrand",
						"type": "DatasetReference"
					},
					"name": "DeleteBrand"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "CodeIsNull"
				},
				{
					"name": "SelectingAllValues"
				},
				{
					"name": "select2"
				},
				{
					"name": "join1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "select3"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "select4"
				},
				{
					"name": "alterRow1"
				},
				{
					"name": "alterRow2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          id as string,",
				"          originated as string,",
				"          description as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> stgBrand",
				"source(output(",
				"          Code as string,",
				"          Name as string,",
				"          Deleted as boolean,",
				"          DateModifiedTalend as timestamp,",
				"          Id as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> ICRISstgBrand",
				"CodeIsNull derive(newId = '0',",
				"          newDeleted = '0',",
				"          changedModifiedDate = currentUTC('{DateModifiedTalend(INICRISBR)}')) ~> derivedColumn1",
				"select2 filter(isNull({Code(INICRISBR)})) ~> CodeIsNull",
				"derivedColumn1 select(mapColumn(",
				"          {id(INBR)},",
				"          {description(INBR)},",
				"          {DateModifiedTalend(INICRISBR)},",
				"          newId,",
				"          newDeleted,",
				"          changedModifiedDate",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectingAllValues",
				"join1 select(mapColumn(",
				"          {id(INBR)} = stgBrand@id,",
				"          {originated(INBR)} = originated,",
				"          {description(INBR)} = description,",
				"          {Code(INICRISBR)} = Code,",
				"          {Name(INICRISBR)} = Name,",
				"          {Deleted(INICRISBR)} = Deleted,",
				"          {DateModifiedTalend(INICRISBR)} = DateModifiedTalend,",
				"          {Id(INICRISBR)} = ICRISstgBrand@Id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"stgBrand, ICRISstgBrand join(stgBrand@id == Code,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"alterRow1 derive(NewDateModifiedTalend = currentDate('{DateModifiedTalend(INICRISBR)}'),",
				"          NewDeleted = '0') ~> derivedColumn2",
				"derivedColumn2 select(mapColumn(",
				"          Id = {id(INBR)},",
				"          Name = {description(INBR)},",
				"          Deleted = NewDeleted,",
				"          {DateModifiedTalend(INICRISBR)} = NewDateModifiedTalend",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"alterRow2 derive(NewDeleted = '1',",
				"          DelDateModTalend = currentDate('{DateModifiedTalend(INICRISBR)}')) ~> derivedColumn3",
				"derivedColumn3 select(mapColumn(",
				"          Code = {Code(INICRISBR)},",
				"          Deleted = NewDeleted,",
				"          DateModifiedTalend = DelDateModTalend",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select4",
				"select2 alterRow(updateIf(isNull({Code(INICRISBR)}))) ~> alterRow1",
				"select2 alterRow(deleteIf(isNull({id(INBR)}) || {id(INBR)} == '')) ~> alterRow2",
				"SelectingAllValues sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Code as string,",
				"          Name as string,",
				"          Deleted as boolean,",
				"          DateModifiedTalend as timestamp,",
				"          Id as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          Id = newId,",
				"          Code = {id(INBR)},",
				"          Name = {description(INBR)},",
				"          Deleted = newDeleted,",
				"          DateModifiedTalend = changedModifiedDate",
				"     )) ~> InsertBrand",
				"select3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Code as string,",
				"          Name as string,",
				"          Deleted as boolean,",
				"          DateModifiedTalend as timestamp,",
				"          Id as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['Code'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 2,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          Code = Id,",
				"          Name,",
				"          Deleted,",
				"          DateModifiedTalend = {DateModifiedTalend(INICRISBR)}",
				"     )) ~> UpdateBrand",
				"select4 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Code as string,",
				"          Name as string,",
				"          Deleted as boolean,",
				"          DateModifiedTalend as timestamp,",
				"          Id as integer",
				"     ),",
				"     deletable:true,",
				"     insertable:false,",
				"     updateable:false,",
				"     upsertable:false,",
				"     keys:['Code'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 3,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          Code,",
				"          Deleted,",
				"          DateModifiedTalend",
				"     )) ~> DeleteBrand"
			]
		}
	}
}